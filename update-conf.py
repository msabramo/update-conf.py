#!/usr/bin/env python

"""Generate config files from 'conf.d' like directories

Split your config file into smaller files in a 'conf.d' like directory.

NOTE: This software was based in the 'update-conf.d' project.
      See: https://github.com/Atha/update-conf.d
"""

import sys
import os
import shutil
import re
import subprocess

import argparse
import ConfigParser

# About
__author__ = "Rarylson Freitas"
__email__ = "rarylson@gmail.com"
__version__ = "0.1.0"

# Constants
# Program
PROGRAM = sys.argv[0]
PROGRAM_NAME = os.path.basename(PROGRAM)
WORKDIR = os.path.dirname(PROGRAM)
# Default arguments
DEFAULT_CONFIG = PROGRAM_NAME + ".conf"
# XXX 'conf.d' or 'snmpd.conf.d'? What is the best default name???
DEFAULT_SPLIT_DIR = "conf.d"
# Aux files
TEMP_END = ".tmp"
BACKUP_END = ".bak"
# Files in the 'conf.d' like dir that will be ignored 
IGNORE_FILES_PATTERN = "\.[bak|backup|old|inactive]"

# Usage
usage_string = """{prog_name} [-h] -n NAME [-c CONF]
         or
       {prog_name} [-h] -f FILE [-d DIR] [-m MAIN]""".format(prog_name=PROGRAM)

# Parsing args
parser = argparse.ArgumentParser(usage=usage_string, 
        description="Generate config files from 'conf.d' like directories")
group = parser.add_mutually_exclusive_group()
group.required = True
# Use with command name
group.add_argument("-n", "--name", help="name of a previously defined command")
parser.add_argument("-c", "--conf", help="update-conf.d conf file (default update-conf.py.conf)", 
        default=DEFAULT_CONFIG)
# Use with file name
group.add_argument("-f", "--file", help="configuration file to be generated")
parser.add_argument("-d", "--dir", help="directory where the splitted files are found (default FILE_DIR/conf.d)")
parser.add_argument("-m", "--main", help="main configuration file")
args = parser.parse_args()

# Parsing config file
# See: http://docs.python.org/2/library/configparser.html#module-ConfigParser
if args.name:
    config_parser = ConfigParser.RawConfigParser()
    # Open config file 
    try:
        config_parser.readfp( open(args.conf) )
    except IOError:
        print "usage: {}".format(usage_string)
        print "{}: error: config file '{}' not found".format(PROGRAM_NAME, args.conf)
        sys.exit(1)
    # Errors
    if not config_parser.has_section( args.name ):
        print "{}: error: invalid command name '{}'".format(PROGRAM_NAME, args.name)
        sys.exit(1)
    if not config_parser.has_option( args.name, 'file' ):
        print "{}: error: required value 'file' not found in {}, section '{}'".format(
                PROGRAM_NAME, args.conf, args.name)
        sys.exit(1)
    # Setting values
    # 'file' is required
    args.file = config_parser.get(args.name,'file')
    if config_parser.has_option(args.name,'dir'):
        args.dir = config_parser.get(args.name,'dir')
    if config_parser.has_option(args.name,'main'):
        args.main = config_parser.get(args.name,'main')

# 'args.dir' default value
if not args.dir:
    args.dir = os.path.dirname(args.file) + os.sep + DEFAULT_SPLIT_DIR

# Generating the new config file
temp_file = os.path.abspath(args.file) + TEMP_END
# For prevent wrong result after a previous bug, remove the old temp file
if os.path.isfile(temp_file):
    os.remove(temp_file)
# TODO Add comment pattern as an option (#,;,//)
#      subprocess.call("echo '# Auto-generated by update-conf.py' > {}".format(temp_file), shell=True)
# Merge main file
if args.main:
    subprocess.call("cat {} >> {}".format(args.main, temp_file), shell=True)
# Merge files in the 'conf.d' like dir
# Get files that not end with '.bak', '.old' and other terminations sorted by lexical order
split_files = [args.dir + os.sep + split_file for split_file in os.listdir(args.dir) if 
        not re.search(IGNORE_FILES_PATTERN, split_file)]
# Merge these files
for split_file in split_files:
    subprocess.call("cat {} >> {}".format(split_file, temp_file), shell=True)

# Updating the new config file
# Backup current config file
backup_file = os.path.abspath(args.file) + BACKUP_END
if os.path.isfile(args.file):
    shutil.move(args.file, backup_file)
# Updating current config file
shutil.move(temp_file, args.file)

